#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

#define NUM_CHILDREN 3

void handle_interrupt(int signum) {
    printf("Parent (PID: %d) - Received interrupt signal (SIGINT).\n", getpid());
}

int main() {
    pid_t pid[NUM_CHILDREN];
    int i;
    int pipe_fds[NUM_CHILDREN][2]; 


    for (i = 0; i < NUM_CHILDREN; i++) {
        if (pipe(pipe_fds[i]) == -1) {
            perror("Pipe creation failed.\n");
            exit(1);
        }
    }

    signal(SIGINT, handle_interrupt);
    for (i = 0; i < NUM_CHILDREN; i++) {
        pid[i] = fork();

        if (pid[i] < 0) {
            fprintf(stderr, "Fork failed.\n");
            exit(1);
        } else if (pid[i] == 0) {
            // Child process
            close(pipe_fds[i][1]); 
            int message;
            read(pipe_fds[i][0], &message, sizeof(message));
            printf("Child %d (PID: %d) - Received message: %d\n", i + 1, getpid(), message);
            close(pipe_fds[i][0]);
            exit(0); 
        }
    }

    printf("Parent (PID: %d) - Sending messages to child processes.\n", getpid());

    int message_to_send[NUM_CHILDREN] = {100, 200, 300};
    for (i = 0; i < NUM_CHILDREN; i++) {
        close(pipe_fds[i][0]); 
        write(pipe_fds[i][1], &message_to_send[i], sizeof(message_to_send[i]));
        close(pipe_fds[i][1]);
    }

    for (i = 0; i < NUM_CHILDREN; i++) {
        int status;
        waitpid(pid[i], &status, 0);
    }

    printf("Parent (PID: %d) - All child processes have finished.\n", getpid());

    return 0;
}